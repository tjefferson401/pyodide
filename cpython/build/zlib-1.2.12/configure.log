--------------------
./configure
Sat Sep 17 15:25:18 UTC 2022
=== ztest2672.c ===
extern int getchar();
int hello() {return getchar();}
===
-c ztest2672.c
... using /src/emsdk/emsdk/upstream/emscripten/emcc

Checking for obsessive-compulsive compiler options...
=== ztest2672.c ===
int foo() { return 0; }
===
/src/emsdk/emsdk/upstream/emscripten/emcc -c -O ztest2672.c

Checking for shared library support...
=== ztest2672.c ===
extern int getchar();
int hello() {return getchar();}
===
/src/emsdk/emsdk/upstream/emscripten/emcc -w -c -O ztest2672.c
/src/emsdk/emsdk/upstream/emscripten/emcc -O -o ztest2672.so ztest2672.o
emcc: warning: generating an executable with an object extension (.so).  If you meant to build an object file please use `-c, `-r`, or `-shared` [-Wemcc]
Building shared library libz.so.1.2.12 with /src/emsdk/emsdk/upstream/emscripten/emcc.

=== ztest2672.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
/src/emsdk/emsdk/upstream/emscripten/emcc -c -O ztest2672.c
Checking for size_t... Yes.

=== ztest2672.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
/src/emsdk/emsdk/upstream/emscripten/emcc -c -O -D_LARGEFILE64_SOURCE=1 ztest2672.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest2672.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
/src/emsdk/emsdk/upstream/emscripten/emcc -O -D_LARGEFILE64_SOURCE=1 -o ztest2672 ztest2672.c
Checking for strerror... Yes.

=== ztest2672.c ===
#include <unistd.h>
int main() { return 0; }
===
/src/emsdk/emsdk/upstream/emscripten/emcc -c -O -D_LARGEFILE64_SOURCE=1 ztest2672.c
Checking for unistd.h... Yes.

=== ztest2672.c ===
#include <stdarg.h>
int main() { return 0; }
===
/src/emsdk/emsdk/upstream/emscripten/emcc -c -O -D_LARGEFILE64_SOURCE=1 ztest2672.c
Checking for stdarg.h... Yes.

=== ztest2672.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
/src/emsdk/emsdk/upstream/emscripten/emcc -c -O -D_LARGEFILE64_SOURCE=1 ztest2672.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest2672.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
/src/emsdk/emsdk/upstream/emscripten/emcc -O -D_LARGEFILE64_SOURCE=1 -o ztest2672 ztest2672.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest2672.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
/src/emsdk/emsdk/upstream/emscripten/emcc -c -O -D_LARGEFILE64_SOURCE=1 ztest2672.c
Checking for return value of vsnprintf()... Yes.

ALL = static shared all64
AR = /src/emsdk/emsdk/upstream/emscripten/emar
ARFLAGS = rc
CC = /src/emsdk/emsdk/upstream/emscripten/emcc
CFLAGS = -O -D_LARGEFILE64_SOURCE=1
CPP = /src/emsdk/emsdk/upstream/emscripten/emcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = /src/emsdk/emsdk/upstream/emscripten/emcc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = /src/emsdk/emsdk/upstream/emscripten/emranlib
SFLAGS = -O -D_LARGEFILE64_SOURCE=1
SHAREDLIB = libz.so
SHAREDLIBM = libz.so.1
SHAREDLIBV = libz.so.1.2.12
STATICLIB = libz.a
TEST = all teststatic testshared test64
VER = 1.2.12
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /usr/local
sharedlibdir = ${libdir}
uname = Linux 5.10.104-linuxkit
--------------------


